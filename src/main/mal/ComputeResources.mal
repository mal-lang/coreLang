/*
 * Copyright 2019-2022 coreLang contributors <https://mal-lang.org/coreLang/contributors.html>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

category ComputeResources {

    asset Hardware
      user info: "Specifies the hardware on which applications can run."
    {
      | attemptUseVulnerabilityFromPhysicalAccess @hidden
        developer info: "Intermediate attack step to allow for defenses and trigger bypasses."
        ->  successfulUseVulnerabilityFromPhysicalAccess,
            bypassHardwareModificationsProtection

      & successfulUseVulnerabilityFromPhysicalAccess @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  useVulnerability

      | attemptUseVulnerabilityFromSoftwareFullAccess @hidden
        developer info: "Intermediate attack step to allow for defenses and trigger bypasses."
        ->  useVulnerability

      | useVulnerability
        user info: "The attacker is able to use the associated vulnerabilities, usually as a result of obtaining physical access."
        ->  vulnerabilities.attemptAbuse

      | attemptSpreadWormThroughRemovableMedia @hidden
        developer info: "Intermediate attack step to allow for defenses and trigger bypasses."
        ->  successfulSpreadWormThroughRemovableMedia,
            bypassHardwareModificationsProtection

      & successfulSpreadWormThroughRemovableMedia @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  spreadWormThroughRemovableMedia

      | spreadWormThroughRemovableMedia @hidden
        developer info: "Try to spread malware through removable media that the users connect to the hardware system."
        ->  (users \/ physicalZones.users).attemptDeliverMaliciousRemovableMedia

      | fullAccess {C,I,A}
        user info: "Full access on a piece of hardware grants full access on the applications running on it and access to the hosted data."
        ->  sysExecutedApps.fullAccess,
            hostedData.attemptRead,
            hostedData.attemptWrite,
            deny,
            attemptSpreadWormThroughRemovableMedia

      | attemptSupplyChainAttack @entrypoint
        user info: "Adversaries may perform supply chain compromise attacks to gain control of hardware before it is put into use."
        developer info: "Intermediate attack step to allow for defenses and trigger bypasses."
        modeler info: "Triggering this attack step is the only way to model hardware supply chain attacks in the language, therefore scenarios interested in those aspects need to employ it as an entry point."
        ->  successfulSupplyChainAttack,
            bypassSupplyChainAuditing

      & successfulSupplyChainAttack @hidden
        developer info: "Intermediate attack step to model defenses."
        -> supplyChainAttack

      | supplyChainAttack [VeryHardAndUncertain]
        user info: "A supply chain compromise means that the attacker has gained full access of the hardware."
        modeler info: "The Hardware supply chain attack represents an attacker being able to tamper with the hardware/firmware before the deployment of the product and not alterations made to the hardware/firmware once it is operating."
        ->  fullAccess

      # supplyChainAuditing
        user info: "Auditing inside the hardware supply chain can detect possible supply chain attacks."
        ->  supplyChainAuditingBypassed

      | bypassSupplyChainAuditing [VeryHardAndUncertain]
        user info: "Supply chain auditing can be bypassed."
        ->  supplyChainAuditingBypassed

      | supplyChainAuditingBypassed @hidden
        developer info: "Supply chain auditing is bypassed either because it was not set or the attacker was able to circumvent it through additional effort."
        ->  successfulSupplyChainAttack

      | physicalAccess @entrypoint
        user info: "Attacker has physical access to the location where the hardware is physically deployed. They could then deny the hardware, locally connect to the hosted applications, and exploit potential physical vulnerabilities."
        modeler info: "This attack step can be used as an entry point when analyzing scenarios that involve gaining physical access to assets."
        ->  deny,
            sysExecutedApps.localConnect,
            attemptHardwareModifications

      | attemptHardwareModifications @hidden
        developer info: "Intermediate attack step to allow for defenses and trigger bypasses."
        ->  successfulHardwareModifications,
            bypassHardwareModificationsProtection

      & successfulHardwareModifications @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  hardwareModifications

      | hardwareModifications @hidden
        developer info: "Attacker is able to modify the hardware setup. They could then exploit physical vulnerabilities or software vulnerabilities that require physical access."
        ->  attemptUseVulnerabilityFromPhysicalAccess,
            vulnerabilities.physicalAccessAchieved,
            sysExecutedApps.physicalAccessAchieved

      # hardwareModificationsProtection
        user info: "This defense protects against unauthorized modifications to the hardware that would allow an attacker to exploit a hardware vulnerability or a user to connect malicious devices to it."
        developer info: "But it does not protect against denial of service attacks or local connect on hosted applications."
        ->  hardwareModificationsProtectionBypassed

      | bypassHardwareModificationsProtection [VeryHardAndUncertain]
        user info: "Hardware modifications protection can be bypassed."
        ->  hardwareModificationsProtectionBypassed

      | hardwareModificationsProtectionBypassed @hidden
        developer info: "Hardware modifications protection is bypassed either because it was not set or the attacker was able to circumvent it through additional effort."
        ->  successfulUseVulnerabilityFromPhysicalAccess,
            successfulHardwareModifications,
            successfulSpreadWormThroughRemovableMedia,
            successfulUnsafeUserActivity

      | attemptUnsafeUserActivity @hidden
        developer info: "Intermediate attack step to allow for defenses and trigger bypasses."
        ->  successfulUnsafeUserActivity,
            bypassHardwareModificationsProtection

      & successfulUnsafeUserActivity @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  unsafeUserActivity

      | unsafeUserActivity
        user info: "A user is performing unsafe actions on the hardware. This exposes the Applications running on top of the hardware and fulfils the physical access requirement of SoftwareVulnerabilities associated with them."
        developer info: "Currently only represents connecting a malicious removable media drive."
        ->  sysExecutedApps.attemptUnsafeUserActivity,
            sysExecutedApps.physicalAccessAchieved

      | deny {A}
        user info: "Denial of service (DoS) attack on hardware leads to DoS on all the applications running on it and hosted data."
        ->  sysExecutedApps.attemptDeny,
            hostedData.attemptDeny

      | read {C}
        user info: "Read on hardware leads to a read on all the applications running on it and hosted data."
        ->  sysExecutedApps.attemptRead,
            hostedData.attemptRead

      | modify {I}
        user info: "Modify on hardware gives the attacker full access to the hardware and leads to a modify/write on all the applications running on it and hosted data."
        ->  fullAccess,
            sysExecutedApps.attemptModify,
            hostedData.attemptWrite
    }

    asset SoftwareProduct extends Information
      user info: "A software product that certain applications are using which represents a specific software package, potentially even a version, which can be associated with certain vulnerabilities or have its deployment repositories compromised in a software supply chain attack."
      developer info: "This asset was introduced in order to improve the usability of the language and enable software supply chain attacks."
    {
      | compromiseApplications
        user info: "If the origin of a software product is compromised (modified maliciously) this is interpreted as a software supply chain attack and therefore the associated applications should also be fully compromised."
        ->  softApplications.attemptFullAccessFromSupplyChainCompromise

      | write @Override
        user info: "If the attacker is able to write the software product they are able to execute a software supply chain attack on the applications associated with it."
        +>  compromiseApplications

      /* The following three attack steps are used to trigger the
       * SoftwareProduct's SoftwareVulnerabilities' impacts on each of the
       * Applications associated with the SoftwareProduct separately.
       */
      | readApplications @hidden
        developer info: "This is an intermediary attack step to propagate read on all of the associated applications if the vulnerability has a confidentiality impact."
        ->  softApplications.attemptReadFromSoftProdVulnerability

      | modifyApplications @hidden
        developer info: "This is an intermediary attack step to propagate modify on all of the associated applications if the vulnerability has an integrity impact."
        ->  softApplications.attemptModifyFromSoftProdVulnerability

      | denyApplications @hidden
        developer info: "This is an intermediary attack step to propagate deny on all of the associated applications if the vulnerability has an availability impact."
        ->  softApplications.attemptDenyFromSoftProdVulnerability
    }

    asset Application
      user info: "An application models any type of software process or component, from firmware and operating systems to plugins and sessions."
      modeler info: "Applications are some of the most common assets in models due to their versatility and scope."
    {
      let allVulnerabilities = vulnerabilities \/ appSoftProduct.softProductVulnerabilities

      let outgoingApplicationConnections = (appConnections \/ outgoingAppConnections)
      let ingoingApplicationConnections = (appConnections \/ ingoingAppConnections)

      # notPresent [Disabled]
        user info: "This defense is used to reason about the attack vectors introduced by this asset. It should be used to model the possibility that the Application does not actually exist. Typically this is useful to see what attack steps are removed if a particular non-essential component(e.g. a plugin, library, feature, or service)."
        developer info: "This defense allows for both speculation about the presence of a particular application and to suggest that if it is possible removing it may restrict the attacker's actions."
        ->  successfulUseVulnerability,
            successfulReverseReach,
            networkConnectFromResponse,
            specificAccessFromLocalConnection,
            specificAccessFromNetworkConnection,
            localAccess,
            networkAccess,
            successfulUnsafeUserActivity,
            fullAccessFromSupplyChainCompromise,
            readFromSoftProdVulnerability,
            modifyFromSoftProdVulnerability,
            denyFromSoftProdVulnerability,
            successfulApplicationRespondConnectThroughData,
            successfulAuthorizedApplicationRespondConnectThroughData,
            successfulRead,
            successfulModify,
            successfulDeny

      | attemptUseVulnerability @hidden
        developer info: "Intermediate attack step to allow for defenses and trigger bypasses."
        ->  successfulUseVulnerability,
            protectorIDPSs.bypassEffectiveness

      & successfulUseVulnerability @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  useVulnerability

      | useVulnerability
        user info: "Try to exploit the associated vulnerabilities."
        developer info: "This includes vulnerabilities associated with the SoftwareProduct that this Application is running as well."
        ->  allVulnerabilities().attemptAbuse,
            attemptSoftwareProductAbuse,
            readFromSoftProdVulnerability,
            modifyFromSoftProdVulnerability,
            denyFromSoftProdVulnerability

      | attemptReverseReach @entrypoint
        user info: "The attacker is reachable from this Application therefore start propagating reverse reach from it. Reverse reach is used to determine whether or not the attacker can be reached by the user."
        developer info: "Intermediate attack step to allow for defenses."
        modeler info: "If the entry point of the attacker is an Application this attack step needs to be explicitly called on it by the modeler in order to have reverse reach start propagating from the Application to the rest of the assets in the model. This is the case because no other attack step on the Application asset triggers this attack step."
        ->  successfulReverseReach

      & successfulReverseReach @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  reverseReach

      | reverseReach @hidden
        developer info: "Reverse reach is used to determine whether or not the attacker can be reached by the user. Reverse reach propagates toward outgoing or bidirectional communications."
        ->  networks.attemptReverseReach,
            ingoingApplicationConnections().attemptReverseReach,
            appExecutedApps.attemptReverseReach,
            attackerUnsafeUserActivityCapabilityWithReverseReach,
            containedData.attemptReverseReach,
            sentData.attemptReverseReach,
            receivedData.attemptReverseReach,
            networkConnectFromResponse

      | localConnect
        user info: "The attacker can interface with the Application without going through networking communications. This is achieved by gaining full access on a hosted Application, specific access on the hosting Application, physical access on the hardware on which the Application is running, or via unsafe user activity."
        ->  localAccess,
            specificAccessFromLocalConnection,
            attemptUseVulnerability, // Attempt to exploit all the vulnerabilities associated with the Application
            allVulnerabilities().localAccessAchieved,
            softwareProductVulnerabilityLocalAccessAchieved

      | networkConnectUninspected
        user info: "An attacker can connect to any network exposed application and try to authenticate or trigger vulnerabilities."
        ->  attemptUseVulnerability, // Attempt to exploit all the vulnerabilities associated with the Application
            allVulnerabilities().networkAccessAchieved,
            softwareProductVulnerabilityNetworkAccessAchieved,
            networkConnect,
            specificAccessNetworkConnect

      | networkConnectInspected
        user info: "If the network communications occur via any ConnectionRules that have their payload inspected the attacker can still authenticate, but they cannot trigger vulnerabilities."
        ->  networkConnect,
            specificAccessNetworkConnect

      | networkConnect @hidden
        developer info: "Intermediate attack step."
        ->  networkAccess

      | specificAccessNetworkConnect @hidden
        developer info: "Intermediate attack step."
        ->  specificAccessFromNetworkConnection

      | accessNetworkAndConnections @hidden
        developer info: "The attacker can access outgoing and bidirectional networks and connections associated with the application."
        ->  networks.accessUninspected,
            networks.accessInspected,
            outgoingApplicationConnections().attemptConnectToApplicationsUninspected,
            outgoingApplicationConnections().attemptConnectToApplicationsInspected,
            outgoingApplicationConnections().attemptAccessNetworksUninspected,
            outgoingApplicationConnections().attemptAccessNetworksInspected

      | attemptNetworkConnectFromResponse @hidden
        developer info: "Intermediate attack step to allow for defenses."
        ->  networkConnectFromResponse

      & networkConnectFromResponse @hidden [VeryHardAndUncertain]
        developer info: "An attacker may be able to respond to requests submitted by a client application."
        ->  networkConnectUninspected

      & specificAccessFromLocalConnection @hidden
        developer info: "Intermediate attack steps for modeling the two requirements (reachability and authentication) for specific access."
        ->  specificAccess

      & specificAccessFromNetworkConnection @hidden
        developer info: "Intermediate attack steps for modeling the two requirements (reachability and authentication) for specific access."
        ->  specificAccess

      | specificAccess
        user info: "The adversary is able to gain low-privilege access on the Application which allows them to access the networks and connections associated with it and locally connect to hosted Applications. Additionally, if they have the required privileges the attacker may also access data hosted, sent, or received by the Application."
        ->  appExecutedApps.localConnect, // An attacker with low-privilege access on the executing instance is assumed to be able to locally interact with the executed applications.
            specificAccessRead,
            specificAccessModify,
            specificAccessDelete,
            bypassContainerization,
            attemptUseVulnerability, // Attempt to exploit all the vulnerabilities associated with the Application
            attemptAuthorizedApplicationRespondConnectThroughData,
            accessNetworkAndConnections // and access the network(s) and connections on/to which the app is connected

      | bypassContainerization [HardAndUncertain]
        user info: "The attacker is able to break out of an application container/sandbox and try to exploit any vulnerability of the host application."
        ->  hostApp.attemptUseVulnerability

      | authenticate
        user info: "The attacker is able to authenticate with the appropriate high-level privileges."
        ->  localAccess,
            networkAccess,
            allVulnerabilities().highPrivilegesAchieved,
            softwareProductVulnerabilityHighPrivilegesAchieved

      | specificAccessAuthenticate
        user info: "The attacker is able to authenticate with the appropriate low-level privileges."
        ->  specificAccessFromLocalConnection,
            specificAccessFromNetworkConnection,
            allVulnerabilities().lowPrivilegesAchieved,
            softwareProductVulnerabilityLowPrivilegesAchieved

      & localAccess @hidden
        developer info: "Intermediate attack steps for modeling the two requirements (reachability and authentication) for full access."
        ->  fullAccess

      & networkAccess @hidden
        developer info: "Intermediate attack steps for modeling the two requirements (reachability and authentication) for full access."
        ->  fullAccess

      | fullAccess @entrypoint {C,I,A}
        user info: "Full access on the Application means the attacker has complete control of the application and can perform any actions within its execution context."
        modeler info: "It is common in models for the attacker to be granted full access on an Application, representing their own tools, that is connected to the Internet to explore possible attack vectors."
        ->  attemptRead,
            attemptModify,
            attemptDeny,
            executionPrivIAMs.attemptAssume,  // Assume also the execution privilege identities of this application to the access to the entire execution context
            attemptApplicationRespondConnectThroughData,
            accessNetworkAndConnections,  // and access the network(s) and connections on/to which the app is connected
            hostApp.localConnect,    // and localConnect on the host application
            managedRoutingFw.attemptModify, // if the routing firewall manager app is compromised the routing firewall should also be compromised
            hostHardware.attemptSpreadWormThroughRemovableMedia, // Propagate malware worms through removable media
            hostHardware.attemptUseVulnerabilityFromSoftwareFullAccess, // If this application is run directly on hardware full access on it allows the attacker to exploit hardware vulnerabilities that do not require physical access
            specificAccess // And also provide specificAccess, mainly for completeness and more intuitive results

      | physicalAccessAchieved @hidden
        developer info: "Intermediate attack step used to propagate physical access throughout application nesting."
        ->  allVulnerabilities().physicalAccessAchieved,
            softwareProductVulnerabilityPhysicalAccessAchieved,
            appExecutedApps.physicalAccessAchieved

      | attemptUnsafeUserActivity @hidden
        developer info: "Intermediate attack step to allow for defenses and trigger bypasses."
        ->  successfulUnsafeUserActivity,
            attackerUnsafeUserActivityCapabilityWithReverseReach, // If the user can reach the attacker via networking assets this makes the unsafe user actions much easier to perform
            attackerUnsafeUserActivityCapabilityWithoutReverseReach, // Without being able to reach the attacker the User can still perform malicious actions on their behalf, but it is much more complicated
            protectorIDPSs.bypassEffectiveness

      & successfulUnsafeUserActivity @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  unsafeUserActivity

      | unsafeUserActivity
        user info: "The unsafe actions of users on this application open it up to attacks and enable vulnerabilities that require user interaction."
        ->  localConnect,
            networkConnectUninspected,
            allVulnerabilities().userInteractionAchieved

      | attackerUnsafeUserActivityCapability @hidden
        developer info: "The impacts of the user's unsafe actions are greatly limited if there are no channels through which the attacker can be reached by the unwitting user."
        ->  successfulUnsafeUserActivity

      & attackerUnsafeUserActivityCapabilityWithReverseReach @hidden
        developer info: "The attacker can be reached from this application and can therefore more easily exploit the unsafe user actions."
        ->  attackerUnsafeUserActivityCapability

      | attackerUnsafeUserActivityCapabilityWithoutReverseReach @hidden [VeryHardAndUncertain]
        developer info: "The attacker cannot be reached from this application. This means that the autonomous malicious code must either be able to do reconnaissance on the fly or the reconnaissance was done beforehand and coded into it. This is much more complex and difficult than the situation where the attacker is reachable from the application which restricts the capabilities of being successful. Important Note: This step should never directly or indirectly lead to reverse reach as it would fulfil the attacker interactivity requirements it is missing."
        ->  attackerUnsafeUserActivityCapability

      # supplyChainAuditing
        user info: "Auditing inside the supply chain can detect possible supply chain attacks."
        ->  supplyChainAuditingBypassed

      | bypassSupplyChainAuditing [VeryHardAndUncertain]
        user info: "Supply chain auditing can be bypassed."
        ->  supplyChainAuditingBypassed

      | supplyChainAuditingBypassed @hidden
        developer info: "The supply chain audit is bypassed either because it was not set or the attacker was able to circumvent it through additional effort."
        ->  fullAccessFromSupplyChainCompromise

      | attemptFullAccessFromSupplyChainCompromise @hidden
        developer info: "Intermediate attack step to allow for defenses and trigger bypasses."
        ->  fullAccessFromSupplyChainCompromise,
            bypassSupplyChainAuditing

      & fullAccessFromSupplyChainCompromise @hidden
        developer info: "Intermediate attack step."
        ->  fullAccess

      /* Intermediate attack steps to allow SoftwareProduct Vulnerabilities to
       * only happen after each Applications is reached by the attacker.
       */
      | attemptReadFromSoftProdVulnerability @hidden
        developer info: "Intermediate attack step to allow for defenses."
        ->  readFromSoftProdVulnerability

      | attemptModifyFromSoftProdVulnerability @hidden
        developer info: "Intermediate attack step to allow for defenses."
        ->  modifyFromSoftProdVulnerability

      | attemptDenyFromSoftProdVulnerability @hidden
        developer info: "Intermediate attack step to allow for defenses."
        ->  denyFromSoftProdVulnerability

      E softwareCheck @hidden
        developer info: "Only enable the following attacks steps if a SoftwareProduct is associated with this Application."
        <-  appSoftProduct
        ->  readFromSoftProdVulnerability,
            modifyFromSoftProdVulnerability,
            denyFromSoftProdVulnerability

      /* The seven following attack steps were implemented to trigger
       * SoftwareVulnerabilities on a SoftwareProduct on each Application
       * associated with the SoftwareProduct individually.
       */
      | softwareProductVulnerabilityLocalAccessAchieved @hidden
        developer info: "Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application."
        ->  appSoftProduct.softProductVulnerabilities.localAccessAchieved,
            softwareProductAbuse

      | softwareProductVulnerabilityNetworkAccessAchieved @hidden
        developer info: "Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application."
        ->  appSoftProduct.softProductVulnerabilities.networkAccessAchieved,
            softwareProductAbuse

      | softwareProductVulnerabilityPhysicalAccessAchieved @hidden
        developer info: "Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application."
        ->  appSoftProduct.softProductVulnerabilities.physicalAccessAchieved,
            softwareProductAbuse

      | softwareProductVulnerabilityLowPrivilegesAchieved @hidden
        developer info: "Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application."
        ->  appSoftProduct.softProductVulnerabilities.lowPrivilegesAchieved,
            softwareProductAbuse

      | softwareProductVulnerabilityHighPrivilegesAchieved @hidden
        developer info: "Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application."
        ->  appSoftProduct.softProductVulnerabilities.highPrivilegesAchieved,
            softwareProductAbuse

      | softwareProductVulnerabilityUserInteractionAchieved @hidden
        developer info: "Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application."
        ->  appSoftProduct.softProductVulnerabilities.userInteractionAchieved,
            softwareProductAbuse

      | attemptSoftwareProductAbuse @hidden
        developer info: "Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application."
        ->  softwareProductAbuse

      & softwareProductAbuse @hidden
        developer info: "Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application."
        ->  readFromSoftProdVulnerability,
            modifyFromSoftProdVulnerability,
            denyFromSoftProdVulnerability

      & readFromSoftProdVulnerability @hidden
        developer info: "Intermediate attack step to handle SoftwareProduct existence."
        ->  attemptRead

      & modifyFromSoftProdVulnerability @hidden
        developer info: "Intermediate attack step to handle SoftwareProduct existence."
        ->  attemptModify

      & denyFromSoftProdVulnerability @hidden
        developer info: "Intermediate attack step to handle SoftwareProduct existence."
        ->  attemptDeny

      | attemptApplicationRespondConnectThroughData @hidden
        developer info: "Intermediate attack step to allow for defenses."
        ->  successfulApplicationRespondConnectThroughData

      & successfulApplicationRespondConnectThroughData @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  applicationRespondConnectThroughData

      | applicationRespondConnectThroughData @hidden
        developer info: "After full access on the application received data can be used to try a connect through respond to the client side application."
        ->  receivedData.attemptApplicationRespondConnect

      | attemptAuthorizedApplicationRespondConnectThroughData @hidden
        developer info: "Intermediate attack step to allow for defenses."
        ->  successfulAuthorizedApplicationRespondConnectThroughData

      & successfulAuthorizedApplicationRespondConnectThroughData @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  authorizedApplicationRespondConnectThroughData

      | authorizedApplicationRespondConnectThroughData @hidden
        developer info: "After specific access on the application received data can be used to try a connect through respond to the client side application. To succeed the attacker must also attain write privileges on the received data."
        ->  receivedData.authorizedApplicationRespondConnectFromApplication

      | attemptRead @hidden
        developer info: "Intermediate attack step to allow for defenses."
        ->  successfulRead

      & successfulRead @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  read

      | read {C}
        user info: "The attacker can read some or all of this service's (and executed by this) source code and/or data (both local and sent/received)."
        ->  containedData.attemptRead,
            appExecutedApps.attemptRead, // Read all applications executed by this (host) application
            sentData.attemptRead, // Both sent and received Data can be read
            receivedData.attemptRead

      | specificAccessRead {C}
        user info: "The attacker can read the service's source code and/or sent and received Data, given the necessary permissions"
        ->  containedData.authorizedReadFromApplication,
            sentData.authorizedReadFromApplication, // Both Data sent and received can be read given the necessary permissions
            receivedData.authorizedReadFromApplication

      | attemptModify @hidden
        developer info: "Intermediate attack step to allow for defenses."
        ->  successfulModify

      & successfulModify @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  modify

      | modify {I}
        user info: "The attacker can modify some or all of this service's (and executed by this) source code and/or data."
        ->  fullAccess,
            containedData.attemptWrite,
            appExecutedApps.attemptModify, // Gain access on all applications executed by this (host) application
            sentData.attemptWrite // Sent Data can be written/modified

      | specificAccessModify {I}
        user info: "The attacker can modify the service's source code and/or sent  Data, given the necessary permissions"
        ->  containedData.authorizedWriteFromApplication,
            sentData.authorizedWriteFromApplication // Sent Data can be written given the necessary permissions

      | attemptDeny @hidden
        developer info: "Intermediate attack step to allow for defenses."
        ->  successfulDeny

      & successfulDeny @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  deny

      | deny {A}
        user info: "The attacker can deny some or all functionality and data pertaining to this application/service as well as executed applications."
        ->  containedData.attemptDeny,
            appExecutedApps.attemptDeny,
            sentData.attemptDeny // Sent Data can also be denied

      | specificAccessDelete {A}
        user info: "The attacker can delete some or all functionality and data pertaining to this application/service as well as executed applications, given the necessary permissions"
        ->  containedData.authorizedDeleteFromApplication,
            sentData.authorizedDeleteFromApplication // Sent Data can be deleted given the necessary permissions

      & denyFromNetworkingAsset @hidden
        developer info: "This is an intermediate attack step to only allow deny on an application when all the connection rules and networks associated with it are denied, because an app can be serving on many different ports."
        ->  attemptDeny

      & denyFromLockout @hidden
        developer info: "This is an intermediate attack step to only trigger deny on an application when all the executing access control roles are locked out."
        ->  attemptDeny

    }

    asset IDPS extends Application
      user info: "An IDPS(Intrusion Detection and Prevention System) is tasked with protecting other applications from malicious activity, such as exploiting vulnerabilities or unsafe user actions."
    {
      # notPresent @Override @hidden [Disabled]
        developer info: "It would be ideal to hide this defense when using modelling tools to avoid confusion."
        modeler info: "As per the comment for the effectiveness defense, the notPresent defense does not function as desired for the IDPS asset and should not be used. The effectiveness defense should be adjusted to reflect the likelihood that the IDPS is present instead."

      # effectiveness [Enabled]
        user info: "The effectiveness defense represents how capable the IDPS is to prevent disruptions from occurring on the associated applications."
        modeler info: "The notPresent defense should inversely impact the effectiveness defense. However, because this is not currently implemented in coreLang it is up to the modeler to properly take this into account when setting the values of these defenses."
        ->  effectivenessBypassed

      | bypassEffectiveness [VeryHardAndUncertain]
        user info: "The effectiveness of an IDPS can be bypassed."
        ->  effectivenessBypassed

      | effectivenessBypassed @hidden
        developer info: "The protection of the IDPS has been bypassed either as a result of attacker activity or due to some internal property of the IDPS."
        ->  protectedApps.successfulUseVulnerability,
            protectedApps.successfulUnsafeUserActivity

      | fullAccess {C,I,A}
        user info: "The IDPS is no longer able to protect the apps assigned to it if it has been compromised itself."
        +>  effectivenessBypassed

      | deny {A}
        developer info: "The IDPS is no longer able to protect the apps assigned to it if it has been denied itself."
        +>  effectivenessBypassed
    }

    asset PhysicalZone
      user info: "A physical zone is the location where hardware systems and networks are physically deployed."
    {
      | gainPhysicalAccess @entrypoint
        user info: "By gaining access on a physical zone, physical access on the housed hardware and networks is also attained."
        modeler info: "This attack step can be used as an entry point when analyzing scenarios that involve gaining physical access to assets."
        ->  hardwareSystems.physicalAccess,
            networks.physicalAccess
    }
}

associations {
  Hardware         [hostHardware]      0..1 <-- SysExecution          --> *    [sysExecutedApps]        Application
      user info: "Hardware on which Applications are running. The host hardware is not mandatory to be specified."
  Application      [hostApp]           0..1 <-- AppExecution          --> *    [appExecutedApps]        Application
      user info: "Sandboxing and containerization are represented through AppExecution. This application hosting can be nested. For example, application 1 runs application 2 which runs application 3. (Where application 1 is an OS, application 2 is a VM, and application 3 is app running in the VM.)"
  IDPS             [protectorIDPSs]       * <-- AppProtection         --> *    [protectedApps]          Application
      user info: "IDPSs can provide protection to other applications."
  SoftwareProduct  [appSoftProduct]    0..1 <-- AppSoftwareProduct    --> *    [softApplications]       Application
      user info: "An application can be associated with a software product that has some specific characteristics such as specific Vulnerabilities and deployment repository."
  PhysicalZone     [physicalZones]        * <-- ZoneInclusion         --> *    [hardwareSystems]        Hardware
      user info: "Access on PhysicalZone will give physicalAccess on the deployed Hardware, but access to the hardware does not provide access to the physical zone (e.g. iLOs)."
  PhysicalZone     [physicalZones]        * <-- ZoneInclusion         --> *    [networks]               Network
      user info: "Access on PhysicalZone will give physicalAccess on the deployed networks, but access to the network does not provide access to the physical zone."
}
