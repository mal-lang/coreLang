/*
 * Copyright 2019-2022 coreLang contributors <https://mal-lang.org/coreLang/contributors.html>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

category User {

    asset User
      user info: "This asset represents the user themselves. It is the suitable attack surface for social engineering attacks."
    {
      # noPasswordReuse [Enabled]
        user info: "If one credential of that user is compromised there is a probability that all other credentials of that user are also compromised."
        ->  passwordReuseCompromise

      # noRemovableMediaUsage [Enabled]
        user info: "The user does not utilise removable media and therefore the attack steps associated with it cannot be reached."
        ->  successfulDeliverMaliciousRemovableMedia

      # securityAwareness
        user info: "The security awareness of the user makes it less likely that social engineering would be successful and reduces the likelihood that the user will engage in unsafe behaviour."
        ->  securityAwarenessBypassed,
            weakCredentials

      | bypassSecurityAwareness [VeryHardAndUncertain]
        user info: "Security awareness can be bypassed."
        developer info: "The probability distribution for this attack step needs to be researched more."
        ->  securityAwarenessBypassed

      | securityAwarenessBypassed @hidden
        developer info: "Security awareness is bypassed either because it was not set, the attacker was able to circumvent it through additional effort, or we simply assume that everyone has an off day every now and then."
        ->  successfulSocialEngineering,
            successfulUnsafeUserActivity,
            successfulDeliverMaliciousRemovableMedia

      | oneCredentialCompromised @hidden
        developer info: "This intermediate attack step is needed in order to block passwordReuseCompromise when no other credential is first compromised."
        ->  passwordReuseCompromise

      & passwordReuseCompromise @hidden
        developer info: "If one reused credential of that user is compromised then, all other credentials of that user can also be compromised."
        ->  userIds.credentials.attemptCredentialsReuse

      | weakCredentials @hidden
        developer info: "Intermediate attack step that defines the strength of all of the Credentials associated with the user. This is inversely proportional with the user's securityAwareness defence."
        ->  userIds.credentials.weakCredentials

      | attemptSocialEngineering
        developer info: "Intermediate attack step that allows for security awareness to reduce the impact of social engineering operations."
        ->  successfulSocialEngineering,
            bypassSecurityAwareness

      & successfulSocialEngineering @hidden
        developer info: "Intermediate attack step to model defences."
        ->  socialEngineering

      | socialEngineering @hidden
        modeler info: "An attacker can try to perform social engineering techniques such as phishing and inducing the user to perform malicious actions."
        developer info: "In the future, other social engineering techniques should be connected to this attack step."
        ->  phishUser,
            unsafeUserActivity

      | attemptDeliverMaliciousRemovableMedia
        user info: "Intermediate attack step that allows for security awareness to reduce the impact of delivering malicious removable media."
        ->  successfulDeliverMaliciousRemovableMedia,
            bypassSecurityAwareness

      & successfulDeliverMaliciousRemovableMedia @hidden
        developer info: "Intermediate attack step to model defences."
        ->  deliverMaliciousRemovableMedia

      | deliverMaliciousRemovableMedia @hidden [Exponential(0.01)]
        modeler info: "An attacker can try to deliver a removable media drive(e.g. USB drive) containing malicious code to a location accessible to the target users."
        developer info: "The probability distribution is entirely arbitrary and should be researched in greater detail."
        ->  userIds.attemptAssume,
            physicalZones.hardwareSystems.attemptUnsafeUserActivity,
            hardwareSystems.attemptUnsafeUserActivity

      | phishUser @hidden
        modeler info: "The attacker can phish the user to gain access to their credentials."
        ->  attemptCredentialTheft

      | attemptCredentialTheft @hidden
        developer info: "Trick the user to provide their credentials."
        ->  credentialTheft

      | credentialTheft @hidden [HardAndUncertain]
        developer info: "This attack is hard to happen."
        modeler info: "Distribution: Bernoulli(0.5) * Exponential(0.1), source: Sommestad (2011) Password authentication attacks: a survey of attacks and when they will succeed, suggest to use Bernoulli(0.05)"
        ->  userIds.credentials.attemptCredentialTheft

      | attemptUnsafeUserActivity @hidden
        developer info: "Intermediate attack step."
        ->  successfulUnsafeUserActivity,
            bypassSecurityAwareness

      & successfulUnsafeUserActivity @hidden
        developer info: "Intermediate attack step to model defences."
        ->  unsafeUserActivity

      | unsafeUserActivity @hidden [Exponential(0.03)]
        developer info: "The user can engage in unsafe behaviour that could allow the attacker to gain access to the applications the user has access to."
        modeler info: "An attacker may trigger the assume step on identities belonging to the user without being able to reach (or be reached) via any of the Applications that the identity has access to. This represents an unmaterialised threat in that scenario. The choice of probability is entirely arbitrary and should be replaced with a scientifically grounded distribution."
        ->  userIds.attemptAssume,
            userIds.execPrivApps.attemptUnsafeUserActivity,
            userIds.subprivileges.subprivileges*.execPrivApps.attemptUnsafeUserActivity,
            userIds.highPrivApps.attemptUnsafeUserActivity,
            userIds.subprivileges.subprivileges*.highPrivApps.attemptUnsafeUserActivity,
            userIds.lowPrivApps.attemptUnsafeUserActivity,
            userIds.subprivileges.subprivileges*.lowPrivApps.attemptUnsafeUserActivity
    }
}

associations {
  User [users] * <-- ZoneAccess            --> * [physicalZones]   PhysicalZone
      developer info: "A user may have access to different physical zones."
  User [users] * <-- HardwareAccess        --> * [hardwareSystems] Hardware
      developer info: "A user may have access to different hardware systems, rigs, or components."
  User [users] * <-- UserAssignedIdentities--> * [userIds]         Identity
      developer info: "A user may have different identities associated with it."
}
