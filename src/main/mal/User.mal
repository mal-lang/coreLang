/*
 * Copyright 2019-2022 coreLang contributors <https://mal-lang.org/coreLang/contributors.html>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

category User {

    asset User
      user info: "This asset represents the user themselves. It is the suitable attack surface for social engineering attacks."
    {
      # noPasswordReuse [Enabled]
        user info: "If one credential of that user is compromised there is a probability that all other credentials of that user are also compromised."
        ->  passwordReuseCompromise

      # noRemovableMediaUsage [Enabled]
        user info: "The user does not utilise removable media and therefore the attack steps associated with it cannot be reached."
        ->  successfulDeliverMaliciousRemovableMedia

      # securityAwareness
        user info: "The security awareness of the user makes it less likely that social engineering would be successful and reduces the likelihood that the user will engage in unsafe behaviour."
        ->  securityAwarenessBypassed,
            weakCredentials

      | bypassSecurityAwareness [VeryHardAndUncertain]
        user info: "Security awareness can be bypassed."
        ->  securityAwarenessBypassed

      | securityAwarenessBypassed @hidden
        developer info: "Security awareness is bypassed either because it was not set, the attacker was able to circumvent it through additional effort, or we simply assume that everyone has an off day every now and then."
        ->  successfulSocialEngineering,
            successfulUnsafeUserActivity,
            successfulDeliverMaliciousRemovableMedia

      | oneCredentialCompromised @hidden
        developer info: "This intermediate attack step is needed in order to block passwordReuseCompromise when no other credential is first compromised."
        ->  passwordReuseCompromise

      & passwordReuseCompromise @hidden
        developer info: "If one reused credential of that user is compromised then, all other credentials of that user can also be compromised."
        ->  userIds.credentials.attemptCredentialsReuse

      | weakCredentials @hidden
        developer info: "Intermediate attack step that defines the strength of all of the Credentials associated with the user. This is inversely proportional with the user's securityAwareness defense."
        ->  userIds.credentials.weakCredentials

      | attemptSocialEngineering @entrypoint
        user info: "An attacker can try to perform social engineering techniques such as phishing and inducing the user to perform malicious actions."
        developer info: "Intermediate attack step to allow for defenses and trigger bypasses."
        modeler info: "Social engineering is modeled by having the attacker trigger this attack step on the target Users."
        ->  successfulSocialEngineering,
            bypassSecurityAwareness

      & successfulSocialEngineering @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  socialEngineering

      | socialEngineering @hidden
        developer info: "Currently social engineering entails phishing credentials and tricking the user into unsafe actions that expose Applications to the attacker. In the future, other social engineering techniques should be added to this attack step."
        ->  phishUser,
            unsafeUserActivity

      | attemptDeliverMaliciousRemovableMedia @entrypoint
        user info: "An attacker can try to deliver a removable media drive(i.e. USB drive) containing malicious code to a location accessible to the target users."
        developer info: "Intermediate attack step to allow for defenses and trigger bypasses."
        modeler info: "Social engineering is modeled by having the attacker trigger this attack step on hthe target Users."
        ->  successfulDeliverMaliciousRemovableMedia,
            bypassSecurityAwareness

      & successfulDeliverMaliciousRemovableMedia @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  deliverMaliciousRemovableMedia

      | deliverMaliciousRemovableMedia @hidden [Exponential(0.01)]
        developer info: "The user is assumed to connect the removable media containing the malicious code to all of the hardware systems that they have access to. Since this is expected to unwittingly happen as part of their normal operations the attack exposes their regular security context."
        ->  userIds.attemptAssume,
            physicalZones.hardwareSystems.attemptUnsafeUserActivity,
            hardwareSystems.attemptUnsafeUserActivity

      | phishUser @hidden
        developer info: "The attacker can phish the user to gain access to their credentials."
        ->  credentialTheft

      | credentialTheft @hidden [HardAndUncertain]
        developer info: "Trick the user into providing their credentials."
        modeler info: "Distribution: Bernoulli(0.5) * Exponential(0.1), source: Sommestad (2011) Password authentication attacks: a survey of attacks and when they will succeed, suggest to use Bernoulli(0.05)"
        ->  userIds.credentials.attemptCredentialTheft

      | attemptUnsafeUserActivity @hidden
        developer info: "Intermediate attack step to allow for defenses and trigger bypasses."
        ->  successfulUnsafeUserActivity,
            bypassSecurityAwareness

      & successfulUnsafeUserActivity @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  unsafeUserActivity

      | unsafeUserActivity @hidden [Exponential(0.03)]
        developer info: "The user can engage in unsafe behaviour that could allow the attacker to gain access to the applications the user has access to."
        modeler info: "If the attacker is not able to reach (or be reached) via any of the Applications this garnered access does not materialise into any actual attack vectors."
        ->  userIds.attemptAssume,
            userIds.attemptUnsafeUserActivity
    }
}

associations {
  User [users] * <-- ZoneAccess            --> * [physicalZones]   PhysicalZone
      user info: "A user may have access to different physical zones."
  User [users] * <-- HardwareAccess        --> * [hardwareSystems] Hardware
      user info: "A user may have access to different hardware systems, rigs, or components."
  User [users] * <-- UserAssignedIdentities--> * [userIds]         Identity
      user info: "A user may have different identities associated with it."
}
