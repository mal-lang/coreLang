/*
 * Copyright 2019-2022 coreLang contributors <https://mal-lang.org/coreLang/contributors.html>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

category Vulnerability {

  abstract asset Vulnerability
  user info: "Vulnerability refers to the inability (of a system, application, etc.) to withstand the effects of a hostile environment."
  {
    # notPresent [Disabled]
      user info: "This defense is used to reason about the attack vectors introduced by this asset. This is particularly useful for vulnerabilities where it is common to explore the possibility of patching them out."
      developer info: "Enabling this defense should make the asset behave as if it did not exist, as such all of its impactful attack steps should be disabled by it."
      ->  abuse

    | attemptAbuse @hidden
      developer info: "Intermediate attack step to allow for defenses."
      ->  abuse

    & abuse
      user info: "The attacker is trying to abuse a vulnerability in an asset."
      ->  attemptExploit

    | attemptExploit @hidden
      developer info: "Intermediate attack step to allow for defenses."
      ->  exploit

    | exploit
      user info: "Attacker is employing an exploit that makes use of this vulnerability."
      ->  impact

    | impact
      user info: "Each vulnerability has an impact (of different levels) on the vulnerable component."
  }

  asset SoftwareVulnerability extends Vulnerability
    user info: "A vulnerability that affects software (i.e. Applications or SoftwareProducts)."
    developer info: "Vulnerabilities in coreLang were designed to be in line with the 3.1 CVSS specification(https://www.first.org/cvss/specification-document#Common-Vulnerability-Scoring-System-version-3-1-Specification-Document). The defenses on the SoftwareVulnerability asset represent 7 of the base metrics scores, all of them except the scope metric. The temporal and environmental metrics are beyond the language's scope."
  {
    /* The following 10 defenses are used to model the 7 metrics of the 3.1
     * CVSS specification that we cover. Network, local, and physical access
     * are individual defenses in coreLang but they all form attack vector
     * score for CVSS. Similarly, low and high privileges are individual
     * defenses, but for CVSS they are one score. If a defense is disabled
     * that means that the SoftwareVulnerability does not require the attacker
     * to fulfil that requirement.
     */
    # networkAccessRequired @suppress [Disabled]
      user info: "Network access is required to abuse the vulnerability."
      modeler info: "https://www.first.org/cvss/v3.1/specification-document#2-1-1-Attack-Vector-AV"
      ->  networkAccessAchieved,
          softwareProduct.softApplications.softwareProductVulnerabilityNetworkAccessAchieved

    # localAccessRequired @suppress [Disabled]
      user info: "Local access is required to abuse the vulnerability."
      modeler info: "https://www.first.org/cvss/v3.1/specification-document#2-1-1-Attack-Vector-AV"
      ->  localAccessAchieved,
          softwareProduct.softApplications.softwareProductVulnerabilityLocalAccessAchieved

    # physicalAccessRequired @suppress [Disabled]
      user info: "Physical access is required to abuse the vulnerability."
      modeler info: "https://www.first.org/cvss/v3.1/specification-document#2-1-1-Attack-Vector-AV"
      ->  physicalAccessAchieved,
          softwareProduct.softApplications.softwareProductVulnerabilityPhysicalAccessAchieved

    # lowPrivilegesRequired @suppress [Disabled]
      user info: "Low privileges are required to abuse the vulnerability."
      modeler info: "https://www.first.org/cvss/v3.1/specification-document#2-1-3-Privileges-Required-PR"
      ->  lowPrivilegesAchieved,
          softwareProduct.softApplications.softwareProductVulnerabilityLowPrivilegesAchieved

    # highPrivilegesRequired @suppress [Disabled]
      user info: "High privileges are required to abuse the vulnerability."
      modeler info: "https://www.first.org/cvss/v3.1/specification-document#2-1-3-Privileges-Required-PR"
      ->  highPrivilegesAchieved,
          softwareProduct.softApplications.softwareProductVulnerabilityHighPrivilegesAchieved

    # userInteractionRequired @suppress [Disabled]
      user info: "Some exploits require user interaction. This defense should specify the probability of such interaction on the given application."
      modeler info: "https://www.first.org/cvss/v3.1/specification-document#2-1-4-User-Interaction-UI"
      ->  userInteractionAchieved,
          softwareProduct.softApplications.softwareProductVulnerabilityUserInteractionAchieved

    # confidentialityImpactLimitations @suppress [Disabled]
      user info: "Limits the impact on confidentiality of the vulnerability."
      modeler info: "https://www.first.org/cvss/v3.1/specification-document#2-3-1-Confidentiality-C"
      ->  read

    # availabilityImpactLimitations @suppress [Disabled]
      user info: "Limits the impact on availability of the vulnerability."
      modeler info: "https://www.first.org/cvss/v3.1/specification-document#2-3-3-Availability-A"
      ->  deny

    # integrityImpactLimitations @suppress [Disabled]
      user info: "Limits the impact on integrity of the vulnerability."
      modeler info: "https://www.first.org/cvss/v3.1/specification-document#2-3-2-Integrity-I"
      ->  modify

    # highComplexityExploitRequired @suppress [Disabled]
      user info: "The vulnerability relies on a high complexity exploit that requires the attacker to expend additional effort (time) in order to successfully make use of it."
      developer info: "A vulnerability that has high complexity due to its intrinsic properties that are beyond the attacker's control."
      modeler info: "https://www.first.org/cvss/v3.1/specification-document#2-1-2-Attack-Complexity-AC"
      ->  exploitTrivially

    | inherentUserInteraction [HardAndUncertain]
      user info: "The user may fulfil the user interaction requirement through their regular activities, without requiring the attacker to induce them to do so."
      modeler info: "Different software vulnerabilities that require user interaction to exploit can vary substantially in how likely those interactions are. They can range from simply using a shortcut or starting a service to enabling very specific features that the user would never perform without attacker influence. The probability assigned to this attack step should be tuned to fit the description of the vulnerability."
      ->  userInteractionAchieved,
          softwareProduct.softApplications.softwareProductVulnerabilityUserInteractionAchieved

    /* The following 10 attack steps are used to satisfy the requirements
     * that the defenses above specify. They are used if the defense is not
     * enabled or if the attacker is able to fulfil the requirement through
     * their actions.
     */
    | networkAccessAchieved @hidden
      developer info: "Intermediate attack step to model network access requirement."
      ->  abuse

    | localAccessAchieved @hidden
      developer info: "Intermediate attack step to model local access requirement."
      ->  abuse

    | physicalAccessAchieved @hidden
      developer info: "Intermediate attack step to model physical access requirement."
      ->  abuse

    | lowPrivilegesAchieved @hidden
      developer info: "Intermediate attack step to model low privileges requirement."
      ->  abuse

    | highPrivilegesAchieved @hidden
      developer info: "Intermediate attack step to model high privileges requirement."
      ->  abuse

    | userInteractionAchieved @hidden
      developer info: "Intermediate attack step to model user interaction requirement."
      ->  abuse

    | impact @hidden
      developer info: "The actual impact caused by successfully exploiting the vulnerability."
      -> read,
         modify,
         deny

    /* Impact attack steps, the ones that actually implement the disruptions
     * based on the Confidentiality, Integrity, and Availability scores,
     * respectively.
     */
    & read
      user info: "The attacker can read some or all of the associated applications's code and data."
      ->  application.read,
          softwareProduct.readApplications

    & modify
     user info: "The attacker can modify some or all of the associated application's data and/or source code."
      ->  application.modify,
          softwareProduct.modifyApplications

    & deny
      user info: "Denial-of-Service attack is an attack in which an application is rendered unavailable to its intended users by temporarily or indefinitely disrupting it."
      ->  application.deny,
          softwareProduct.denyApplications

    | attemptAbuse @hidden
      developer info: "Trigger inherent user interaction for software vulnerabilities, it is only relevant for vulnerabilities that do require user interaction."
      +>  inherentUserInteraction

    | attemptExploit @hidden @Override
      developer info: "Intermediate attack step to allow for defenses."
      ->  exploitTrivially,
          exploitWithEffort

    /* These two attack steps are used to implement attacks of varying
     * complexity based on the attack complexity CVSS score.
     */
    & exploitTrivially @hidden
      developer info: "The exploit is trivial and requires insignificant effort from the attacker in order to be successful."
      -> exploit

    & exploitWithEffort @hidden [Exponential(0.01)]
      developer info: "The attacker must expend effort in order to successfully exploit the vulnerability."
      -> exploit
  }

  /* Hardware vulnerabilities were created to be slightly simpler versions of
   * their software counterparts. They are not based on a vulnerability
   * framework, but are fairly similar to the CVSS specification since they
   * were based on the SoftwareVulnerability design.
   *
   * What constitutes a software or hardware vulnerability in coreLang may not
   * be immediately intuitive. The distinction is based on where the impact of
   * the vulnerability is observed, rather than where the fault is located.
   * For example, if a hardware vulnerability does not negatively impact
   * hardware, but affects software applications running on said hardware it
   * would be depicted as a SoftwareVulnerability with a PhysicalAccess
   * requirement in coreLang.
   */
  asset HardwareVulnerability extends Vulnerability
    user info: "A vulnerability that affects hardware."
  {
    # physicalAccessRequired @suppress [Disabled]
      user info: "Physical access is required to abuse the vulnerability."
      modeler info: "Some hardware vulnerabilities require physical access to the components, while some can be exploited from software."
      ->  physicalAccessAchieved

    # confidentialityImpactLimitations @suppress [Disabled]
      user info: "Limits the impact on confidentiality of the vulnerability."
      modeler info: "Analogous defense to the SoftwareVulnerability impact limitations."
      ->  read

    # availabilityImpactLimitations @suppress [Disabled]
      user info: "Limits the impact on availability of the vulnerability."
      modeler info: "Analogous defense to the SoftwareVulnerability impact limitations."
      ->  deny

    # integrityImpactLimitations @suppress [Disabled]
      user info: "Limits the impact on integrity of the vulnerability."
      modeler info: "Analogous defense to the SoftwareVulnerability impact limitations."
      ->  modify

    # effortRequiredToExploit @suppress [Disabled]
      user info: "The vulnerability requires additional effort(time) from the attacker in order to be successful."
      modeler info: "The expectation is that the attacker has prolonged or recurring access to the targeted hardware in order to repeatedly/continuously try the exploit."
      ->  exploitTrivially

    | physicalAccessAchieved @hidden
      developer info: "Intermediate attack step to model physical access requirement."
      ->  abuse

    | impact @hidden
      developer info: "The actual impact caused by successfully exploiting the vulnerability."
      -> read,
         modify,
         deny

    /* Impact attack steps, the ones that actually implement the disruptions
     * based on the Confidentiality, Integrity, and Availability impact
     * limitations, respectively.
     */
    & read
      user info: "The attacker can read some or all of the associated hardware's data."
      ->  hardware.read

    & modify
     user info: "The attacker can modify some or all of the associated hardware's behaviour."
      ->  hardware.modify

    & deny
      user info: "Denial-of-Service attack is an attack in which a machine or hardware component is rendered unavailable to its intended users by temporarily or indefinitely disrupting it."
      ->  hardware.deny

    | attemptExploit @hidden @Override
      developer info: "Intermediate attack step to allow for defenses."
      ->  exploitTrivially,
          exploitWithEffort

    /* These two attack steps are used to implement attacks of varying
     * complexity based on the effort required to exploit defense.
     */
    & exploitTrivially @hidden
      developer info: "The exploit is trivial and requires insignificant effort from the attacker in order to be successful."
      -> exploit

    & exploitWithEffort @hidden [Exponential(0.01)]
      developer info: "The attacker must expend effort in order to successfully exploit the vulnerability."
      -> exploit
  }
}

associations {
  SoftwareVulnerability               [vulnerabilities]   * <-- ApplicationVulnerability --> 0..1 [application]     Application
      user info: "An Application can have multiple software vulnerabilities."
  SoftwareVulnerability    [softProductVulnerabilities]   * <-- ApplicationVulnerability --> 0..1 [softwareProduct] SoftwareProduct
      user info: "A SoftwareProduct can have multiple software vulnerabilities."
  HardwareVulnerability               [vulnerabilities]   * <-- hardwareVulnerability    --> 0..1 [hardware]        Hardware
      user info: "A Hardware system/component can have multiple hardware vulnerabilities."
}
