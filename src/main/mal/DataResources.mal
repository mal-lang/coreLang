/*
 * Copyright 2019-2022 coreLang contributors <https://mal-lang.org/coreLang/contributors.html>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

category DataResources {

    asset Information
      user info: "Represents any type of information that might be contained inside Data. This include general purpose information, but also serves as the basis for more specialized types, such as Credentials and SoftwareProduct. Information represents the abstract concept, while Data represent an actual instance of information stored or transmitted digitally."
    {
      | read
        user info: "The attacker is able to read the information. They may still be unable to extract it, which represents the adversary being able to read it themselves. This is the case if autonomous code is able to read it, but lack the required networking connections to transmit it back to the adversary."
        ->  dataReplicas.read,
            containerData.read

      | write
        user info: "The attacker is able to write the information."
        ->  dataReplicas.write,
            containerData.write,
            dependentApps.fullAccess,
            delete

      | delete
        user info: "The attacker is able to delete the information."
        ->  dataReplicas.delete,
            containerData.delete,
            deny

      | deny
        user info: "The attacker is able to deny the information."
        ->  dataReplicas.deny,
            containerData.deny,
            dependentApps.deny

      | extract
        user info: "The attacker is able to extract the information. This means that they have a path available through which they can transfer the information back to a system that they control."

      // The following 5 attack steps are used to implement data replication
      | attemptReadFromReplica @hidden
        developer info: "Reading one replica allows the attacker to read all other replicas as well since the information contained in them is the same."
        ->  read

      & attemptWriteFromReplica @hidden
        developer info: "Information can be overwritten only if all replicas have been overwritten."
        ->  write

      & attemptDeleteFromReplica @hidden
        developer info: "Information can be deleted only if all replicas have been deleted."
        ->  delete

      & attemptDenyFromReplica @hidden
        developer info: "Information can be denied only if all replicas have been denied."
        ->  deny

      | attemptExtractFromReplica @hidden
        developer info: "The attacker attempts to extract the information."
        ->  extract
    }

    asset Data
      user info: "Any form of data that can be stored or transmitted."
    {
      # notPresent [Disabled]
        user info: "This defense is used to reason about the attack vectors introduced by this asset. It should be used to model the possibility of data not existing on the associated container (i.e. Hardware, Application, Network, etc.)."
        developer info: "Enabling this defense should make the asset behave as if it did not exist, as such all of its impactful attack steps should be disabled by it."
        ->  applicationRespondConnect,
            successfulRead,
            successfulWrite,
            successfulDeny,
            successfulDelete,
            reverseReach,
            extract

      | authorizedAccessFromApplication @hidden
        developer info: "Try to gain access to the data through permissions."
        ->  authorizedReadFromApplication,
            authorizedWriteFromApplication,
            authorizedDeleteFromApplication

      !E dataEncrypted @hidden
        developer info: "If the data are encrypted then accessing them requires the associated encryption credentials/key. Data will be considered encrypted if there is at least one Credentials instance associated with it. Otherwise, 'accessUnencryptedData' is triggered."
        <-  encryptCreds
        ->  accessUnencryptedData

      !E dataSigned @hidden
        developer info: "If the data are signed then writing them requires the associated signing credentials/key. Data will be considered signed if there is at least one Credentials asset associated with it. Otherwise, 'accessUnsignedData' is triggered."
        <-  signingCreds
        ->  accessUnsignedData

      E payloadInspectionBypassFromEncryptedData @hidden
        developer info: "If the data are encrypted then payload inspection cannot be performed on the connection rules they are transmitted over."
        <-  encryptCreds
        ->  bypassPayloadInspectionFromEncryptedData

      | bypassPayloadInspectionFromEncryptedData @hidden
        developer info: "The connection rules that the encrypted data traverse over cannot provide payload inspection since they are assumed to permit encrypted traffic. This implies that the attacker could simply encrypt their own communications to evade inspection."
        ->  (senderApp.outgoingApplicationConnections() /\ transitNetwork.inboundAllowedConnections()).payloadInspectionBypassed,
            (receiverApp.ingoingApplicationConnections() /\ transitNetwork.outboundAllowedConnections()).payloadInspectionBypassed

      & accessUnencryptedData @hidden
        developer info: "If data are unencrypted then access them."
        ->  accessDecryptedData

      & accessUnsignedData @hidden
        developer info: "If data are unsigned then alter them."
        ->  accessSpoofedData

      | accessSpoofedData @hidden
        developer info: "Intermediate attack step to only allow effects of 'accessUnsignedData' on data after compromising the signing credentials or signing is disabled."
        ->  applicationRespondConnect,
            successfulWrite

      | accessDecryptedData @hidden
        developer info: "Intermediate attack step to only allow effects of 'accessUnencryptedData' on data after compromising the encryption credentials or encryption is disabled."
        ->  applicationRespondConnect,
            successfulRead,
            successfulWrite,
            successfulDelete

      | attemptApplicationRespondConnect @hidden
        developer info: "Intermediate attack step to handle defenses."
        ->  applicationRespondConnect

      & applicationRespondConnect @hidden
        developer info: "In order to perform a respond connect attack the adversary must be able to write the received data."
        ->  senderApp.attemptNetworkConnectFromResponse,
            containedData.applicationRespondConnect

      | authorizedApplicationRespondConnectFromApplication @hidden
        developer info: "The adversary can attempt a respond connect attack from an Application, but they still require write permissions in order to perform it."
        ->  authorizedApplicationRespondConnect

      | authorizedApplicationRespondConnectFromIAM @hidden
        developer info: "The attacker has obtained the access control permissions required to modify the incoming requests."
        ->  authorizedApplicationRespondConnect

      & authorizedApplicationRespondConnect @hidden
        developer info: "In order to perform a respond connect attack the adversary must be able to write the received data. If they only have specific access on the Application we need to see if they also have the required permissions."
        ->  attemptApplicationRespondConnect

      | attemptRead @hidden
        developer info: "Intermediate attack step to allow for defenses."
        ->  successfulRead

      & successfulRead @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  read

      | read {C}
        user info: "The attacker can read the data. This means that the data can be used for further attack steps, but they are not necessarily obtained by the attacker. The extract attack step covers the scenario where the attacker actually collects the data."
        ->  containedData.attemptRead,
            information.read,
            replicatedInformation.attemptReadFromReplica,
            extract

      | authorizedReadFromIAM @hidden
        developer info: "The attacker has obtained the access control permissions required to read the data."
        ->  authorizedRead

      | authorizedReadFromApplication @hidden
        developer info: "The attacker can reach the data via an Application, but they still require the adequate permissions to read it."
        ->  authorizedRead

      & authorizedRead @hidden
        developer info: "An attacker is able to read the Data through authorized permissions, this requires both access to the Data and the adequate permissions."
        ->  attemptRead

      | attemptWrite @hidden
        developer info: "Intermediate attack step to allow for defenses."
        ->  successfulWrite

      & successfulWrite @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  write

      | write {I}
        user info: "The attacker can write to the location of the data, effectively modifying or deleting it."
        ->  containedData.attemptWrite,
            information.write,
            replicatedInformation.attemptWriteFromReplica,
            dependentApps.fullAccess,
            attemptDelete

      | authorizedWriteFromIAM @hidden
        developer info: "The attacker has obtained the access control permissions required to write the data."
        ->  authorizedWrite

      | authorizedWriteFromApplication @hidden
        developer info: "The attacker can reach the data via an Application, but they still require the adequate permissions to write it."
        ->  authorizedWrite

      & authorizedWrite @hidden
        developer info: "An attacker is able to write the Data through authorized permissions, this requires both access to the Data and the adequate permissions."
        ->  attemptWrite

      | attemptDelete @hidden
        developer info: "Intermediate attack step to allow for defenses."
        -> successfulDelete

      & successfulDelete @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  delete

      | delete {I,A}
        user info: "The attacker can delete the data."
        ->  containedData.attemptDelete,
            information.delete,
            replicatedInformation.attemptDeleteFromReplica,
            attemptDeny

      | authorizedDeleteFromIAM @hidden
        developer info: "The attacker has obtained the access control permissions required to delete the data."
        ->  authorizedDelete

      | authorizedDeleteFromApplication @hidden
        developer info: "The attacker can reach the data via an Application, but they still require the adequate permissions to delete it."
        ->  authorizedDelete

      & authorizedDelete @hidden
        developer info: "An attacker is able to delete the Data through authorized permissions, this requires both access to the Data and the adequate permissions."
        ->  attemptDelete

      | attemptDeny @hidden
        developer info: "Intermediate attack step to allow for defenses."
        ->  successfulDeny

      & successfulDeny @hidden
        developer info: "Intermediate attack step to model defenses."
        ->  deny

      | deny {A}
        user info: "If a DoS is performed data are denied, it has the same effects as deleting the data."
        ->  containedData.attemptDeny,
            information.deny,
            replicatedInformation.attemptDenyFromReplica,
            dependentApps.deny

      & denyFromLockout @hidden
        developer info: "This is an intermediate attack step to only trigger deny on data when all the access control roles that can read them are locked out."
        ->  attemptDeny

      | attemptReverseReach @hidden
        developer info: "Intermediate attack step to allow for defenses."
        ->  reverseReach

      & reverseReach @hidden
        developer info: "Reverse reach for Data is used to determine whether or not the data can be transferred to attacker."
        ->  extract,
            containedData.attemptReverseReach

      & extract
        user info: "The attacker can extract the data. The read attack step represents just being able to make use of the data for further attack steps without the attacker obtaining it."
        ->  information.extract,
            replicatedInformation.attemptExtractFromReplica
    }
}

associations {
  // ### Data related associations
  Data        [containingData]       * <-- DataContainment       --> *    [containedData]          Data
      user info: "Data can be contained inside other data."
  Data        [containedData]        * <-- AppContainment        --> *    [containingApp]          Application
      user info: "An application should be able to contain some data."
  Data        [sentData]             * <-- SendData              --> *    [senderApp]              Application
      user info: "An application can also send some data that are supposed to be transferred over a network or connection. This expresses an active connection."
  Data        [receivedData]         * <-- ReceiveData           --> *    [receiverApp]            Application
      user info: "An application can also receive some data that are supposed to be transferred over a network or connection. This expresses an active connection."
  Data        [transitData]          * <-- DataInTransit         --> *    [transitNetwork]         Network
      user info: "A network can also contain some data that are supposed to be network-wide available."
  Data        [hostedData]           * <-- DataHosting           --> 0..1 [hardware]               Hardware
      user info: "Data can be hosted on hardware."
  Data        [containerData]        * <-- InfoContainment       --> *    [information]            Information
      user info: "Data can contain information, as for example credentials."
  Data        [dataReplicas]         * <-- Replica               --> *    [replicatedInformation]  Information
      user info: "Information can be replicated across multiple data assets that offer redundancy."
  // ### Application dependence associations
  /* Dependence is used to represent various situations where the operations
   * of the Application are impacted by modifying/denying the Data/Information
   * it depends upon. Examples of this type of behavior are configurations,
   * plugins, libraries, or other input data that is critical to the purpose
   * of the software component represented by the Application. This
   * association should only be used for circumstances where the workflow of
   * the Application is not altered, but the Data/Information are modified
   * within the regular operating process. For situations where abnormal
   * behaviour is induced to impact the Application SoftwareVulnerabilities
   * should be used instead.
   */
  Data        [dataDependedUpon]     * <-- Dependence            --> *    [dependentApps]         Application
      user info: "Data can be specified as a dependence for an Application."
  Information [infoDependedUpon]     * <-- Dependence            --> *    [dependentApps]         Application
      user info: "Information can be specified as a dependence for an Application."
}
