/*
 * Copyright 2019-2020 coreLang contributors <https://mal-lang.org/coreLang/contributors.html>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

category Vulnerability {

  abstract asset Vulnerability
  {
    let allVulnerableSoftware = application \/ softwareProduct.softApplications

    # userInteracts
      user info: "Some exploits require user interaction. This defense should specify the probability of such interaction on the given application."

    # remove
      user info: "If the remove defense is enabled the vulnerability will not be effective on the model."
      ->  abuse

    | attemptAbuse @hidden
      user info: "This is the attack step that must be reached in order for a vulnerability to be able to be abused. This is also the single entry point for all vulnerabilities in the manual modeling scenario."
      -> abuse

    & abuse
      user info: "The attacker is attempting to abuse a vulnerability in an application."
      -> exploits.attemptExploit

    | impact
      user info: "Each vulnerability has an impact (of different level) on the vulnerable component."
  }

  asset UnknownVulnerability extends Vulnerability
    developer info: "Meant to capture vulnerabilities without CVE or to model what-if scenarios where the parser controls the impact and distribution based on e.g., Attacker Profiles"
    modeler info: "To be used together with Exploit specializations based on your modeling scenario"
  {
    | impact @hidden
      ->  requestForgery,
          codeExecution,
          objectAccess,
          modify,
          deny,
          read

    | requestForgery
      user info: "Request Forgery attacks occur when the attacker can create or control transmissions from a vulnerable application."
      ->  application.appConnections.transmit,
          application.appConnections.transmitResponse

    | codeExecution
      user info: "The attacker is able to inject code into the application process, thus assuming the application's privileges on the hosting instance and influence other applications or the underlying OS."
      ->  allVulnerableSoftware().codeExecution

    | objectAccess
      user info: "The attacker can bypass the access control of an object and gain full access."
      ->  object.attemptBypassAccessControl

    | modify
     user info: "The attacker can modify some or all of this application's data."
      ->  allVulnerableSoftware().modify

    | deny
      user info: "Denial-of-service attack is an attack in where a machine or network resource is rendered unavailable to its intended users by temporarily or indefinitely disrupting it"
      ->  allVulnerableSoftware().deny,
          object.deny

    | read
      user info: "The attacker can read some or all of this applications's code and data."
      ->  allVulnerableSoftware().read
  }

}

category Exploit {
    
  abstract asset Exploit
    user info: "A vulnerability can be exploited. The complexity of the exploit can vary."
  {
    | attemptExploit
      -> vulnerability.impact

    | impact @hidden
      developer info: "This attack step is only kept for making the automatic vulnerabilities compatible with the new exploit & vulnerability format."
  }

  asset UnknownExploit extends Exploit
    user info: "Potential unknown exploits that might occur due flaws or configuration errors in software, e.g., 0-day exploits or exploits not discovered by scanners."
    modeler info: "The specialization is assumed to be used with the UnknownVulnerability asset"
    developer info: "Distributions are omitted and are meant to be controlled by a parser based on e.g., scenarios or threat profiles"
  {
    
  }
}

associations {
  Object                      [object]         0..1 <-- ObjectVulnerability      --> * [objvulnerabilities] Vulnerability
      developer info: "Every Object in the model can be connected to any Vulnerability."
  Vulnerability               [vulnerabilities]   * <-- ApplicationVulnerability --> 0..1 [application]     Application
      developer info: "Every Application can also be connected to any Vulnerability."
  Vulnerability    [softProductVulnerabilities]   * <-- ApplicationVulnerability --> 0..1 [softwareProduct] SoftwareProduct
      developer info: "Every SoftwareProduct can also be connected to any Vulnerability."
  Vulnerability               [vulnerability]     1 <-- VulnerabilityExploit     --> *    [exploits]        Exploit

}
